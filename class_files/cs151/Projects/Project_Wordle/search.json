[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Project 1: Wordle",
    "section": "",
    "text": "Welcome to the first project of CS 151! This project is designed to help you practice working with strings in the context of an engaging application: the Wordle game initially developed by Josh Wardle and now available on the New York Times website. Given Wordle’s enormous popularity, we thought it would be fun to give you a chance to implement the game!\nAs per usual, you will submit this project through GitHub Classroom, and you can find the link to accept the project and download the initial template files below.\nAccept Project\n\nTo help you navigate the project, I’ve included a table of contents in the sidebar, but I would highly recommend you read through everything as you work your way through the project. If you want to check your final program, a web implementation of the same program is available at the link below.\nWeb Demo\n\n\nStrategies and Hints\n\nAs with any large program, it is essential to get each milestone working before moving on to the next. It almost never works to write large programs all at once without testing the individual pieces as you go.\nRemember that uppercase and lowercase letters are different in Python! The letters displayed in the game window are all uppercase, but the ENGLISH_WORDS constant contains all lowercase words. You will want to use appropriate string methods to convert accordingly, so you can make proper comparisons.\nIn order to have access to the gw variable that represents the WordleGWindow object, you will likely want to define any helper functions inside the main wordle function. If you define them outside the wordle function, you will not be able to access the gw variable, which might not be an issue for some helper functions, but will probably be an issue for others.\nDecompose the variable tasks in the problem into smaller functions! This will help you track what you are doing and simplify debugging. You can easily have less than 10 lines of code inside the enter_action function if you decompose things nicely into smaller functions."
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "Introduction to Wordle",
    "section": "",
    "text": "The good news is that you don’t have to implement the Wordle project entirely from scratch. The starting repository already includes the following files:\n\n\n\n\n\n\n\nFile name\nDescription\n\n\n\n\nWordle.py\nThe starter file for the project, which uses the WordleGraphics module to display the board.\n\n\nWordleGraphics.py\nThis module exports the WordleGWindow object type, which is responsible for managing the graphics, along with several useful constants.\n\n\nenglish.py\nThis module exports the constant ENGLISH_WORDS, and a function is_english_word(s) that checks whether s is a valid English word. It is important to note that all the ENGLISH_WORDS are lowercase!\n\n\n\nUnless you are implementing extensions, the only file you will need to change is Wordle.py, which imports the resources it needs from the other modules already. The starting version of Wordle.py is included in the starting resources, but is included here in Figure 1 for reference.\n\n\n\n########################################\n# Name:\n# Collaborators (if any):\n# Estimated time spent (hr):\n# Description of any added extensions:\n########################################\n\nfrom WordleGraphics import WordleGWindow, N_ROWS, N_COLS\nfrom english import ENGLISH_WORDS, is_english_word\nfrom WordleGraphics import CORRECT_COLOR, PRESENT_COLOR, MISSING_COLOR, UNKNOWN_COLOR\nimport random\n\ndef wordle():\n    \"\"\" The main function to play the Wordle game. \"\"\"\n\n    def enter_action():\n        \"\"\" What should happen when the RETURN or ENTER key is pressed. \"\"\"\n        gw.show_message(\"You need to implement this method\")\n\n\n    gw = WordleGWindow()\n    gw.add_enter_listener(enter_action)\n\n\n\n\n# Startup boilerplate\nif __name__ == \"__main__\":\n    wordle()\n\n\nFigure 1: The starting state of Wordle.py. Of particular importance is line 21, where an instance of the WordleGWindow data type is stored in the variable gw. This is the variable you will use throughout the rest of the program when wanting to interact with the WordleGWindow.\n\n\n\nWhen you download the initial repository, a lot of the code is already in and ready to go because we have implemented the graphics for you. Running Wordle.py creates a window, draws the letter boxes, and creates the keyboard at the bottom of the window. You can even type letters either by hitting keys on the keyboard or clicking the key on the screen, just as you can when you are playing the online version. Figure 2 shows both the initial screen and the screen you get after typing in the five letters of the useful starting word RATES, which includes five of the most common letters.\n\n\n\n\n\n\nFigure 2: The current state of the window both initially (left), and then after typing in the letters RATES (right).\n\n\n\nUnfortunately, that is all the program does at the moment. It doesn’t actually let you play the Wordle game. That’s your job! But first, it is worth spending a bit of time reviewing the rules of Wordle, in case you’ve somehow managed to miss the craze."
  },
  {
    "objectID": "milestones.html",
    "href": "milestones.html",
    "title": "Introducing Milestones",
    "section": "",
    "text": "Whenever you are working on a programming project of any significant size, you should never try to get the entire project running all at once (until the very end). A much more effective strategy is to define a series of milestones that allow you to complete and test the project in stages. Ideally, each milestone you choose should be a program that you can test and debug independently, even if the code you write to test a particular milestone doesn’t make its way into the finished project. The advantage you get from making it possible to test each stage more than compensates for having to write a little extra code along the way. Similarly, it often makes sense to defer more of the more complex aspects of the project until after you have gotten the basic foundation working. The next few sections outline six milestones for the Wordle project that walk you through different stages of the implementation. You should get each one working before moving on to the next one.",
    "crumbs": [
      "Introducing Milestones"
    ]
  },
  {
    "objectID": "milestones.html#milestone-1-pick-a-random-word-and-display-it",
    "href": "milestones.html#milestone-1-pick-a-random-word-and-display-it",
    "title": "Milestones",
    "section": "Milestone 1: Pick a random word and display it",
    "text": "Milestone 1: Pick a random word and display it"
  },
  {
    "objectID": "milestones.html#milestone-2-checking-for-valid-words",
    "href": "milestones.html#milestone-2-checking-for-valid-words",
    "title": "Milestones",
    "section": "Milestone 2: Checking for valid words",
    "text": "Milestone 2: Checking for valid words\nAlthough the starting program allows the user to type letters into the Wordle game, nothing happens when you hit the RETURN key or click the ENTER button. The WordleGWindow object lets you respond to that event though though the add_enter_listener method. If you call\ngw.add_enter_listener(enter_action)\nthen typing RETURN or clicking ENTER in the window will trigger a call to the function enter_action, which you now get to write!\nFor this milestone, your job is to add code to enter_action so that it checks to see whether the string the player has typed in is a legitimate English word. This means you will have to get the letters from the WordleGWindow object and assemble them into a word, then check it against the English library. If it isn’t a valid word, your implementation of enter_action should call the show_message method with the string \"Not in word list\", which is what the New York Times website displays. If it is a word, you should temporarily display some more positive message that shows you have this milestone up and running."
  },
  {
    "objectID": "milestones.html#milestone-3-coloring-the-boxes",
    "href": "milestones.html#milestone-3-coloring-the-boxes",
    "title": "Milestones",
    "section": "Milestone 3: Coloring the boxes",
    "text": "Milestone 3: Coloring the boxes\nFor this milestone, you need to add code to enter_action that, after checking to make sure an entry is a legal word, goes through and colors the boxes to show the user which letters in the guess match the hidden word. The method that you will need to accomplish this task is gw.set_square_color(row, col, color)\nThe row and column arguments to this function are the same as the ones you used to set or get the letters from the boxes, and color is the color you want to use for the background of that square. Typically, that color will be one of the constants CORRECT_COLOR, PRESENT_COLOR, or MISSING_COLOR. These constants are imported from WordleGraphics, where they were defined according to a six-digit hexadecimal number that gives the red, green, and blue intensities of the color:\nCORRECT_COLOR = \"#66BB66\"   # A shade of green\nPRESENT_COLOR = \"#CCBB66\"   # A shade of brownish yellow\nMISSING_COLOR = \"#999999\"   # A shade of gray\nUNKNOWN_COLOR = \"#FFFFFF\"   # Initial white color\nThe hard part of this milestone is figuring out the color for each square, which is not as easy as it might first appear, particularly when the hidden word contains multiple copies of the same letter. As a recommended strategy, you should:\n\nFind and color the correct (green) letters first, so that you don’t end up coloring a letter yellow that will later turn out to be in the correct position.\nKeep track of which letters in the guess have been “used” (already colored) and cross them off as you assign colors. This ensures that, as you consider how to color later letters, you are properly accounting for any letters already used, and will help ensure that you properly color duplicate letter combinations. To achieve this, keeping track of the available letters still to “use” from the secret word in a string, and then replacing those letters with something like a space or underscore as you color them works fairly well. Don’t be afraid to write helper functions to help you achieve this! Break it down!\n\nYou have sample words and guesses shown in the milestone. Test them against your program! You can always temporarily define a specific secret word by just redefining that variable after it gets randomly assigned. Test other combinations as well against what you think they should be (or compare them against the only demo). This is the easiest part of the project to think you have working flawlessly when, in fact, there are issues. Test it!"
  },
  {
    "objectID": "milestones.html#milestone-4-advance-or-end-the-game",
    "href": "milestones.html#milestone-4-advance-or-end-the-game",
    "title": "Milestones",
    "section": "Milestone 4: Advance or end the game",
    "text": "Milestone 4: Advance or end the game\nAfter coloring the boxes, your program must do a few final things to be functional:\n\nFirst, it must check to see whether the user has correctly guessed all N_COLS letters. In that case, you want to have your program display some properly congratulatory message and then set the current row to N_ROWS, which will disable further keyboard input.\nIf the user has already guessed N_ROWS times, then they lose the game! Display a message to the window telling them as this, and letting them know what the mystery word was.\nOtherwise, just move on to the next row. This information is maintained inside the WordleGraphics module (which needs this information to know where typed letters should appear), and can be interacted with by using the set_current_row and get_current_row methods."
  },
  {
    "objectID": "milestones.html#milestone-5-color-the-keys",
    "href": "milestones.html#milestone-5-color-the-keys",
    "title": "Milestones",
    "section": "Milestone 5: Color the keys",
    "text": "Milestone 5: Color the keys\nYour last milestone implements a very helpful feature from the New York Times website wherein it updates the colors of the keys on the virtual keyboard, making it easy to see what letters you’ve already positioned, found, or determined not to be present. The WordleGWindow object exports the methods set_key_color and get_key_color to accomplish this task. These methods use the same string codes (and constant variables) as the corresponding methods for squares.\nIn solving this milestone, it is important to remember that once you have set the color of a key, it won’t change back. If, for example, you’ve colored the S key green, it will never get set to yellow or gray, even though you may end up using those colors for other squares that contain as S. Key colors can only ever be upgraded, never “downgraded”."
  },
  {
    "objectID": "extensions.html",
    "href": "extensions.html",
    "title": "Possible Extension Ideas",
    "section": "",
    "text": "There are many extensions you could add to the Wordle game. Here are a few that might be fun or spark an idea, but keep in mind that you can implement any extension you can imagine!\n\nCreate a more balanced dictionary. If you simply choose a word at random from the dictionary, some letters will appear more frequently than others in specific positions. Josh Wardle’s original implementation solved this problem by keeping two sets of words: a smaller one used to select the secret hidden word in which the letter frequencies are more balanced, and a larger one for determining whether a guess is legal. You could devise and implement a strategy to add this two-tiered dictionary without having to choose specific words by hand.\nMake more balanced choices from the dictionary. There are other strategies you can use to improve the distribution of letters in the hidden words that don’t require creating a separate dictionary. For example, you could make a significant improvement simply by choosing fewer hidden words that end with the letter “s”, as almost 30% of the five-letter words do. To implement this strategy, you could define the constant\nFINAL_S_FRACTION = 1 / 3\nand then use that constant to accept words ending in “s” only a third of the time, going back and choosing a different word the other two-thirds of the time.\nEnhance the graphics when the user wins the game. The set_square_color method allows you to change the background color of a square to any color you choose, not just the predetermined constants. If you want to make victories more exciting, you could color or even animate (if you want to read ahead in the text) the squares so that the letters of the correct entry cycled through the colors of the rainbow before settling to be all green.\nCreate an option that lists all possible words that are legal given the previous guesses. Even though doing so is clearly cheating, some players would like to see a list of all the words remaining in the dictionary that would be acceptable given the previous set of guesses. You can trigger this option by having the user hit the RETURN key or click the ENTER key when the line is not yet finished and filled with text, in which case some squares will contain the empty string. When this occurs, you can have your program go through all the words, check whether they conform to all the previous clues, and print those words to the console.\nImplement Wordle’s “hard mode”. In both the original implementation and the Times version, you can choose to play Wordle in “hard mode” by toggling a switch in the options. Upon doing so, you are no longer free to guess any valid five-letter word. Instead, each subsequent guess must incorporate any information you have gotten from previous guesses. So if you determine on your first guess that an R is the first letter and that an E is present but not the fourth letter, then your next guess must reflect that information: having the R still in the first position and the E in either the second, third, or fifth positions.\nKeep score in a file. The New York Times Wordle site keeps track of the number of games you’ve played and presents a graph of the number of guesses you needed. To implement this feature, you would need to maintain a file that kept track of this information from game to game and then display it at the end. Although you could print this information to the console, you could also display the counts in the Wordle grid, so that each row shows the number of times you needed that many guesses. Thus, if you had solved four Wordle games in three guesses, eleven in four guesses, and six in five guesses, your Wordle program might show the following display at the end:",
    "crumbs": [
      "Extensions",
      "Possible Extension Ideas"
    ]
  },
  {
    "objectID": "milestones/milestone1.html",
    "href": "milestones/milestone1.html",
    "title": "Milestone 1: Checking for valid words",
    "section": "",
    "text": "Although the starting program allows the user to type letters into the Wordle game, nothing happens when you hit the RETURN key or click the ENTER button. The WordleGWindow object lets you respond to that event though, through the add_enter_listener method. If you call\ngw.add_enter_listener(enter_action)\n(which is already in the template file) then hitting RETURN or clicking ENTER in the window will trigger a call to the function enter_action, which you now get to write!\nFor this milestone, your job is to add code to enter_action so that it checks to see whether the string the player has typed in is a legitimate English word. Initially, this means you will have to get the letters from the WordleGWindow object and assemble them into a word, which is essentially the exact opposite of what you did in Milestone 0! Then, once you have the typed word as a string, you can check it against the English library. You can do this either using the in keyword or using the imported function is_english_word from the english library. If the typed word isn’t a valid English word, your implementation of enter_action should call the show_message method with the string \"Not in word list\", which is what the New York Times website displays. If it is a word, you should temporarily display some more positive message that shows you have this milestone up and running.\n\n\n\n\n\n\nTip\n\n\n\nBe careful here with capitalization! All letters typed into the Wordle window are capitalized, and thus you will likely create a string of capital letters. But all of the words in the ENGLISH_WORDS sequence are lowercase! So make sure you are comparing similar cases!",
    "crumbs": [
      "Milestone 1: Checking for valid words"
    ]
  },
  {
    "objectID": "milestones/milestone3.html",
    "href": "milestones/milestone3.html",
    "title": "Milestone 3: Pick a random secret word",
    "section": "",
    "text": "Up until this point your game uses the same secret word every single time you press play. This is great for testing and debugging purposes, but it isn’t very good from a “good game” perspective! As such, your goal in this milestone is to set the secret word to a random five-letter English word.\nThis is a great candidate for writing another helper function! Write a function which will return a random five-letter English word, and then call it where you were originally setting your secret word to a string. There are a variety of ways you could try to create a random five-letter word, but I would suggest using the random library to choose a random word from the ENGLISH_WORDS sequence. Remember though that ENGLISH_WORDS has words of all sizes in it, so you might need to keep choosing a new random word until you get one that is five letters long.\nOnce you have your function running, you should be able to call it and assign the returned value to your secret word variable. Now every time you play you’ll be guessing a random word!",
    "crumbs": [
      "Milestone 3: Pick a random secret word"
    ]
  },
  {
    "objectID": "milestones/milestone2.html",
    "href": "milestones/milestone2.html",
    "title": "Milestone 2: Coloring the boxes",
    "section": "",
    "text": "For this milestone, you need to add code to enter_action that, after checking to make sure an entry is a legal word, goes through and colors the boxes to show the user which letters in the guess match the secret word. The WordleGWindow method that you will need to accomplish this task is gw.set_square_color(row, col, color)\nThe row and column arguments to this function are the same as the ones you used to set or get the letters from the boxes, and color is the color you want to use for the background of that square. Typically, that color will be one of the constants CORRECT_COLOR, PRESENT_COLOR, or MISSING_COLOR. These constants are already imported from WordleGraphics, where they were defined according to a six-digit hexadecimal number that gives the red, green, and blue intensities of the colors that correspond to the actual game:\nCORRECT_COLOR = \"#66BB66\"   # A shade of green\nPRESENT_COLOR = \"#CCBB66\"   # A shade of brownish yellow\nMISSING_COLOR = \"#999999\"   # A shade of gray\nUNKNOWN_COLOR = \"#FFFFFF\"   # Initial white color\nThe hard part of this milestone is figuring out the color for each square, which is not as easy as it might first appear, particularly when the hidden word contains multiple copies of the same letter. As a recommended strategy, you should:\n\nFind and color the correct (green) letters first, so that you don’t end up coloring a letter yellow that will later turn out to be in the correct position.\nKeep track of which letters in the guess have been “used” (already colored) and cross them off as you assign colors. This ensures that, as you consider how to color later letters, you are properly accounting for any letters already used, and will help ensure that you properly color duplicate letter combinations. To achieve this, consider keeping track of the available letters still to “use” from the secret word in a string, and then replacing those letters with something like a space or underscore as you color them. Don’t be afraid to write helper functions to help you achieve this! Break it down!\n\nYou have sample words and guesses shown in the Introduction of this guide. Test them against your program! You can just redefine your secret word variable to whatever you need and then type in various possible guesses. Test other combinations as well against what you think they should be (or compare them against the online demo). This is the easiest part of the project to think you have working flawlessly when, in fact, there are issues. Test it!",
    "crumbs": [
      "Milestone 2: Coloring the boxes"
    ]
  },
  {
    "objectID": "milestones/milestone4.html",
    "href": "milestones/milestone4.html",
    "title": "Milestone 4: Advance or end the game",
    "section": "",
    "text": "Now that you are trying to guess random words, you will almost assuredly be requiring more than a single guess! As such, it is time to ensure that we can advance the game along.\nAfter each guess, assuming that we have not won or lost the game yet, we need to move on to the next row. This ensures that when the user goes to type a new word, it shows up on the second (or later) rows. The information about the current row is maintained inside the WordleGraphics module (which needs this information to know where typed letters should appear), and can be interacted with by using the set_current_row and get_current_row methods. After each guess then, you should set the current row to whatever index the next row would be. Test it!\nFinally, you need to implement the victory or loss conditions.\n\nA player wins the game if they have correctly guessed all N_COLS letters, which would correspond to all of the letters being colored CORRECT_COLOR (green). In that case, you want to have your program display some properly congratulatory message and then set the current row to N_ROWS, which will disable further keyboard input.\nA player loses the game if they have made N_ROWS guesses without winning. Display a message to the window telling them as this, and letting them know what the mystery word was.\n\nAt this point you have a working game of Wordle! Play it through a bunch of times to ensure it is behaving as you expect. Don’t assume all the code you have written is perfect!",
    "crumbs": [
      "Milestone 4: Advance or end the game"
    ]
  },
  {
    "objectID": "milestones/milestone5.html",
    "href": "milestones/milestone5.html",
    "title": "Milestone 5: Color the keys",
    "section": "",
    "text": "Your last milestone implements a very helpful feature from the New York Times website wherein it updates the colors of the keys on the virtual keyboard, making it easy to see what letters you’ve already positioned, found, or determined not to be present. The WordleGWindow object exports the methods set_key_color and get_key_color to accomplish this task. These methods use the same string codes (and constant variables) as the corresponding methods for squares.\nIn solving this milestone, it is important to remember that once you have set the color of a key, it won’t regress to a worse color. If, for example, you’ve colored the S key green, it will never get set to yellow or gray, even though you may end up using those colors for other squares that contain as S. Key colors can only ever be upgraded, never “downgraded”.",
    "crumbs": [
      "Milestone 5: Color the keys"
    ]
  },
  {
    "objectID": "introduction.html#the-starting-template",
    "href": "introduction.html#the-starting-template",
    "title": "Introduction to Wordle",
    "section": "",
    "text": "The good news is that you don’t have to implement the Wordle project entirely from scratch. The starting repository already includes the following files:\n\n\n\n\n\n\n\nFile name\nDescription\n\n\n\n\nWordle.py\nThe starter file for the project, which uses the WordleGraphics module to display the board.\n\n\nWordleGraphics.py\nThis module exports the WordleGWindow object type, which is responsible for managing the graphics, along with several useful constants.\n\n\nenglish.py\nThis module exports the constant ENGLISH_WORDS, and a function is_english_word(s) that checks whether s is a valid English word. It is important to note that all the ENGLISH_WORDS are lowercase!\n\n\n\nUnless you are implementing extensions, the only file you will need to change is Wordle.py, which imports the resources it needs from the other modules already. The starting version of Wordle.py is included in the starting resources, but is included here in Figure 1 for reference.\n\n\n\n########################################\n# Name:\n# Collaborators (if any):\n# Estimated time spent (hr):\n# Description of any added extensions:\n########################################\n\nfrom WordleGraphics import WordleGWindow, N_ROWS, N_COLS\nfrom english import ENGLISH_WORDS, is_english_word\nfrom WordleGraphics import CORRECT_COLOR, PRESENT_COLOR, MISSING_COLOR, UNKNOWN_COLOR\nimport random\n\ndef wordle():\n    \"\"\" The main function to play the Wordle game. \"\"\"\n\n    def enter_action():\n        \"\"\" What should happen when the RETURN or ENTER key is pressed. \"\"\"\n        gw.show_message(\"You need to implement this method\")\n\n\n    gw = WordleGWindow()\n    gw.add_enter_listener(enter_action)\n\n\n\n\n# Startup boilerplate\nif __name__ == \"__main__\":\n    wordle()\n\n\nFigure 1: The starting state of Wordle.py. Of particular importance is line 21, where an instance of the WordleGWindow data type is stored in the variable gw. This is the variable you will use throughout the rest of the program when wanting to interact with the WordleGWindow.\n\n\n\nWhen you download the initial repository, a lot of the code is already in and ready to go because we have implemented the graphics for you. Running Wordle.py creates a window, draws the letter boxes, and creates the keyboard at the bottom of the window. You can even type letters either by hitting keys on the keyboard or clicking the key on the screen, just as you can when you are playing the online version. Figure 2 shows both the initial screen and the screen you get after typing in the five letters of the useful starting word RATES, which includes five of the most common letters.\n\n\n\n\n\n\nFigure 2: The current state of the window both initially (left), and then after typing in the letters RATES (right).\n\n\n\nUnfortunately, that is all the program does at the moment. It doesn’t actually let you play the Wordle game. That’s your job! But first, it is worth spending a bit of time reviewing the rules of Wordle, in case you’ve somehow managed to miss the craze."
  },
  {
    "objectID": "introduction.html#playing-wordle",
    "href": "introduction.html#playing-wordle",
    "title": "Introduction to Wordle",
    "section": "Playing Wordle",
    "text": "Playing Wordle\nThe object of the Wordle puzzle is to figure out the hidden word for the day using no more than six guesses. When you type in a word and then hit the RETURN or ENTER key, the game gives you information about how close your guess is by coloring the background of the letters. For every letter in your guess that is in its correct position, Wordle colors the background of that letter a light shade of green, as indicated in your program by the constant CORRECT_COLOR. For every letter that appears in the word but is not in the correct position, Wordle colors the background a brownish yellow (PRESENT_COLOR in your program). All the letters in the guess that don’t appear in the word are colored a medium gray (MISSING_COLOR in your code).\nFor example, suppose that the hidden word for the day was RELIC, and your first guess was RATES, as in the Figure 2 image. The R is in the correct position, and the word contains an E, but not in the position guessed. The hidden word does not contain the letters T, A, and S. Wordle reports that information by changing the background color of the squares like this:\n\n\n\n\n\n\n\n\n\nEven though you know the position of the R, it doesn’t make sense to guess more words beginning with R at this point because doing so gives you no new information (assuming you are not playing in hard mode, where you are required to do so). Suppose that you tried guessing the word LINGO, which contains five new letters, two of which appear in the word but none of which are correctly positioned. Wordle responds by coloring the letters in your second guess as follows:\n\n\n\n\n\n\n\n\n\nPutting these clues together means that you know that the word begins with an R, contains the letters E, L, and I in some order other than the one you guessed, and that the letters A, T, S, N, G, and O do not appear anywhere in the word. These answers give you an enormous amount of information! If you think carefully about it, you might find the word RELIC, which is in fact the only English word that meets these conditions.\n\n\n\n\n\n\n\n\n\nDone in three!\nIt is worth noting a few other rules and special cases. The hidden word and each of your guesses must be a real English word that is five letters long. The file english.py included in the repository is described in Chapter 3 of the text, and exports two resources here: the constant ENGISH_WORDS, which is a sequence of all valid English words in lowercase (of any length, not just the five-letter ones!), and a function is_english_word(s), which tests whether s is a valid English word. If you guess a word that is not in the word list, Wordle displays a message to that effect, at which point you can delete the letters you’ve entered and try again. Another rule is that you only get six guesses. If all the letters don’t match by then, Wordle gives up on you and tells you what the hidden word was.\nThe most interesting special cases arise when the hidden word and the guesses contain multiple copies of the same letter. Suppose, for example, that the hidden word is GLASS and you, for some reason, guess the word SASSY. Wordle responds with the following colors:\n\n\n\n\n\n\n\n\n\nThe green S shows that there is an S in the fourth position, and the yellow S shows that a second S appears somewhere else in the hidden word. The S in the middle of SASSY, however, remains gray because the hidden word does not contain three instances of the letter S."
  },
  {
    "objectID": "introduction.html#the-wordlegraphics-module",
    "href": "introduction.html#the-wordlegraphics-module",
    "title": "Introduction to Wordle",
    "section": "The WordleGraphics Module",
    "text": "The WordleGraphics Module\nEven though you don’t need to make any changes to it or understand the details of its operation, you need to know what capabilities the WordleGraphics module has on offer so that you can use those facilities in your code. The most important thing to know is that this library module exports a data type called WordleGWindow, which implements all the graphical capabilities of the game. The methods exported by the WordleGWindow type are outlined below in Table 1. The right column gives a brief description of what these functions do, though more complete descriptions appear later in this guide in the description of the milestones that require them.\n\n\n\n\nTable 1: A listing and brief description of the variety of functions available to manipulate a WordleGWindow object. I have included the dot before each function/method name as a reminder that you will call these methods on the WordleGWindow object using the receiver syntax we discussed in class. In the starting code in Figure 1, that object is named gw and is defined on line 21.\n\n\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\nWordleGWindow()\nCreates and displays the graphics window\n\n\n.set_square_letter(row, col, letter)\nSets the letter in the specified row and column\n\n\n.get_square_letter(row, col)\nReturns the letter in the specified row and column\n\n\n.add_enter_listener(func)\nSpecifies the function to be run when the ENTER key is pressed\n\n\n.show_message(msg)\nShows a message below the squares\n\n\n.set_square_color(row, col, color)\nSets the color of the specified square\n\n\n.get_square_color(row, col)\nReturns the color of the specified square\n\n\n.set_current_row(row_idx)\nSets the row index in which typed characters appear\n\n\n.get_current_row()\nReturns the current row index\n\n\n.set_key_color(letter, color)\nSets the color of the specified key letter\n\n\n.get_key_color(letter)\nReturns the color of the specified key letter"
  },
  {
    "objectID": "introduction/wordle_rules.html",
    "href": "introduction/wordle_rules.html",
    "title": "Playing Wordle",
    "section": "",
    "text": "The object of the Wordle puzzle is to figure out the hidden word for the day using no more than six guesses. When you type in a word and then hit the RETURN or ENTER key, the game gives you information about how close your guess is by coloring the background of the letters. For every letter in your guess that is in its correct position, Wordle colors the background of that letter a light shade of green, as indicated in your program by the constant CORRECT_COLOR. For every letter that appears in the word but is not in the correct position, Wordle colors the background a brownish yellow (PRESENT_COLOR in your program). All the letters in the guess that don’t appear in the word are colored a medium gray (MISSING_COLOR in your code).\nFor example, suppose that the hidden word for the day was RELIC, and your first guess was RATES, as in the starting graphics image. The R is in the correct position, and the word contains an E, but not in the position guessed. The hidden word does not contain the letters T, A, and S. Wordle reports that information by changing the background color of the squares like this:\n\n\n\n\n\n\n\n\n\nEven though you know the position of the R, it doesn’t make sense to guess more words beginning with R at this point because doing so gives you no new information (assuming you are not playing in hard mode, where you are required to do so). Suppose that you tried guessing the word LINGO, which contains five new letters, two of which appear in the word but none of which are correctly positioned. Wordle responds by coloring the letters in your second guess as follows:\n\n\n\n\n\n\n\n\n\nPutting these clues together means that you know that the word begins with an R, contains the letters E, L, and I in some order other than the one you guessed, and that the letters A, T, S, N, G, and O do not appear anywhere in the word. These answers give you an enormous amount of information! If you think carefully about it, you might find the word RELIC, which is in fact the only English word that meets these conditions.\n\n\n\n\n\n\n\n\n\nDone in three!\nIt is worth noting a few other rules and special cases. The hidden word and each of your guesses must be a real English word that is five letters long. The file english.py included in the repository is described in Chapter 3 of the text, and exports two resources here: the constant ENGISH_WORDS, which is a sequence of all valid English words in lowercase (of any length, not just the five-letter ones!), and a function is_english_word(s), which tests whether s is a valid English word. If you guess a word that is not in the word list, Wordle displays a message to that effect, at which point you can delete the letters you’ve entered and try again. Another rule is that you only get six guesses. If all the letters don’t match by then, Wordle gives up on you and tells you what the hidden word was.\nThe most interesting special cases arise when the hidden word and the guesses contain multiple copies of the same letter. Suppose, for example, that the hidden word is GLASS and you, for some reason, guess the word SASSY. Wordle responds with the following colors:\n\n\n\n\n\n\n\n\n\nThe green S shows that there is an S in the fourth position, and the yellow S shows that a second S appears somewhere else in the hidden word. The S in the middle of SASSY, however, remains gray because the hidden word does not contain three instances of the letter S.",
    "crumbs": [
      "Playing Wordle"
    ]
  },
  {
    "objectID": "introduction/wordle_graphics.html",
    "href": "introduction/wordle_graphics.html",
    "title": "The WordleGraphics Module",
    "section": "",
    "text": "Even though you don’t need to make any changes to it or understand the details of its operation, you need to know what capabilities the WordleGraphics module has on offer so that you can use those facilities in your code. The most important thing to know is that this library module exports a data type called WordleGWindow, which implements all the graphical capabilities of the game. The methods exported by the WordleGWindow type are outlined below in Table 1. The right column gives a brief description of what these functions do, though more complete descriptions appear later in this guide in the description of the milestones that require them.\n\n\n\n\nTable 1: A listing and brief description of the variety of functions available to manipulate a WordleGWindow object. I have included the dot before each function/method name as a reminder that you will call these methods on the WordleGWindow object using the receiver syntax we discussed in class. In the starting code, that object is named gw and is defined on line 21.\n\n\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\nWordleGWindow()\nCreates and displays the graphics window\n\n\n.set_square_letter(row, col, letter)\nSets the letter in the specified row and column\n\n\n.get_square_letter(row, col)\nReturns the letter in the specified row and column\n\n\n.add_enter_listener(func)\nSpecifies the function to be run when the ENTER key is pressed\n\n\n.show_message(msg)\nShows a message below the squares\n\n\n.set_square_color(row, col, color)\nSets the color of the specified square\n\n\n.get_square_color(row, col)\nReturns the color of the specified square\n\n\n.set_current_row(row_idx)\nSets the row index in which typed characters appear\n\n\n.get_current_row()\nReturns the current row index\n\n\n.set_key_color(letter, color)\nSets the color of the specified key letter\n\n\n.get_key_color(letter)\nReturns the color of the specified key letter",
    "crumbs": [
      "The WordleGraphics Module"
    ]
  },
  {
    "objectID": "introduction/starting_template.html",
    "href": "introduction/starting_template.html",
    "title": "The Starting Template",
    "section": "",
    "text": "Fortunately, you don’t have to implement the Wordle project entirely from scratch. The starting repository already includes the following files:\n\n\n\n\n\n\n\nFile name\nDescription\n\n\n\n\nWordle.py\nThe starter file for the project, which uses the WordleGraphics module to display the board. This is the file that you will be editing.\n\n\nWordleGraphics.py\nThis module exports the WordleGWindow object type, which is responsible for managing the graphics, along with several useful constants. Unless adding some extensions, you will not need to touch this file.\n\n\nenglish.py\nThis module exports the constant ENGLISH_WORDS, and a function is_english_word(s) that checks whether s is a valid English word. It is important to note that all the ENGLISH_WORDS are lowercase! You will not need to edit this file.\n\n\n\nNote that unless you are implementing extensions, the only file you will need to change is Wordle.py, which imports the resources it needs from the other modules already. The starting version of Wordle.py is included in the starting resources, but is included here in Figure 1 for reference.\n\n\n\n########################################\n# Name:\n# Collaborators (if any):\n# Estimated time spent (hr):\n# Description of any added extensions:\n########################################\n\nfrom WordleGraphics import WordleGWindow, N_ROWS, N_COLS\nfrom english import ENGLISH_WORDS, is_english_word\nfrom WordleGraphics import CORRECT_COLOR, PRESENT_COLOR, MISSING_COLOR, UNKNOWN_COLOR\nimport random\n\ndef wordle():\n    \"\"\" The main function to play the Wordle game. \"\"\"\n\n    def enter_action():\n        \"\"\" What should happen when the RETURN or ENTER key is pressed. \"\"\"\n        gw.show_message(\"You need to implement this method\")\n\n\n    gw = WordleGWindow()\n    gw.add_enter_listener(enter_action)\n\n\n\n\n# Startup boilerplate\nif __name__ == \"__main__\":\n    wordle()\n\n\nFigure 1: The starting state of Wordle.py. Of particular importance is line 21, where an instance of the WordleGWindow data type is stored in the variable gw. This is the variable you will use throughout the rest of the program when wanting to interact with the WordleGWindow.\n\n\n\nWhen you download the initial repository, a lot of the code is already written and ready to go, because we have implemented the graphics for you. Running the initial version of Wordle.py creates a window, draws the letter boxes, and creates the keyboard at the bottom of the window. You can even type letters either by hitting keys on the keyboard or clicking the key on the screen, just as you can when you are playing the online version. Figure 2 shows both the initial screen and the screen you get after typing in the five letters of the useful starting word RATES, which includes five of the most common letters.\n\n\n\n\n\n\nFigure 2: The current state of the window both initially (left), and then after typing in the letters RATES (right).\n\n\n\nUnfortunately, that is all the program does at the moment. It doesn’t actually let you play the Wordle game. That’s your job! But first, it is worth spending a bit of time reviewing the rules of Wordle, in case you’ve somehow managed to miss the craze.",
    "crumbs": [
      "The Starting Template"
    ]
  },
  {
    "objectID": "milestones/milestone0.html",
    "href": "milestones/milestone0.html",
    "title": "Milestone 0: Display a word",
    "section": "",
    "text": "Important\n\n\n\nThis milestone is purely to get you acquainted with some basic operations you’ll need to complete the project! Once you have it working, you’ll be able to remove some parts that you won’t need later. But taking the time to complete this now will aid you greatly as you enter Milestone 2.\n\n\nFor your first milestone, your task is to choose a five-letter word and have that word appear in the five boxes across the first row of the window automatically. Clearly this is not exactly the way that the game of Wordle works, but this milestone exists to get you practice interfacing between your code and the WordleGWindow, which is saved as the variable gw in the starting template.\nTo achieve this effect, you should begin by defining a variable within the wordle function to store your five-letter word. Remember that the convention in Python programming is that function definitions come first, followed by the code that uses those functions. As such, I recommend that you define your variable after the gw.add_enter_listener(enter_action) line. Remember to indent it so that it is part of the wordle function!\nTo display the word to the screen, looking at the table of available WordleGWindow methods here, you might notice that there is no obvious way to display an entire word. As such, it is a great candidate for writing a helper function! Define a new function inside the wordle function and after the enter_action function definition called display_word(word). This function will be responsible for displaying the argument word to the first row of the Wordle window. How can you accomplish this? Well, looking back at the table of available WordleGWindow methods, what you do have available is the method set_square_letter, which allows you to put a single letter in a box identified by its row and column indices. So you’ll need to think about how you could use that in your display_word function to populate the first row immediately upon launching the program.\nAs with everything in Python, rows and columns are numbered beginning with 0, so that the top row of the window is row 0, and its column numbers range from 0 to 4. To avoid cluttering up your code with numbers that don’t tell you anything about what they represent (where does the 4 come from in the previous sentence, for example?), it is best to import the constants N_ROWS and N_COLS from WordleGraphics and use those constants wherever your code needs to know how many rows or columns exist. Not only does N_COLS - 1 provide more insight than the number 4, but this strategy also makes it far easier to implement a SuperWordle extension with longer words or a different number of guesses.\nDon’t forget that you need to call this function on whatever variable you assigned your five-letter word to! So your lines after the gw.add_enter_listener might look something like:\nsecret_word = \"happy\" #my chosen 5 letter word\ndisplay_word(secret_word) # displaying it using my defined function\nOnce you have this working you can comment out the display_word function call, as the game would be very easy if you showed the user the secret word before they started guessing! It highlights the fact, though, that often times it can be worth doing a little work that will later be unnecessary, if it helps you better understand the tools and problem-solving strategies at your disposal. In this case, the code that you will end up writing for part of Milestone 1 will look very similar to what you wrote here.",
    "crumbs": [
      "Milestone 0: Display a word"
    ]
  }
]